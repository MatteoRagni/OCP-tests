# 
# Modello Massa
# 1 controllo
# (Problema tempo fisso, massima distanza)
# Inizializzazione
restart:
with(XOptima):
# Equazioni del modello matematico del veicolo
EQ1 := diff(x(t),t) = v(t) ;
EQ2 := diff(v(t),t) = clip(F(t),minClip,maxClip) ;
EQ3 := diff(F(t),t) = vF(t) - 0*(F(t)-clip(F(t),minClip,maxClip))/tau ;
# Equazioni del moto in zeta
ode   := [EQ||(1..3)]: Vector(%);
xvars := [x(t),v(t),F(t)];
uvars := [vF(t)];
# Equazioni del modello matematico del carrello
loadDynamicSystem(equations=ode,controls=uvars,states=xvars) ;
# Inserisce condizioni al contorno
addBoundaryConditions(initial=[x=0,v=0,F=0],final=[v=0,F=0]);
infoBoundaryConditions() ;
# Penalty description
addControlBound( vF, label=controlForce, min = -vFmax, max = vFmax ) ;
# Funzioni utente
mapUserFunctionToRegularized( clip, "ClipIntervalWithErf", [h=0.1,delta=0.1] ) ;
setTarget( mayer = -x(zeta_f) ) ;
# Generazione del problema di controllo ottimo
generateOCProblem( "BangBangFclip",
                    post_processing = [[clip(F(zeta),minClip,maxClip),"F_clipped"]],
                    parameters = [tau     = 100,
                                  vFmax   = 10,
                                  minClip = -1,
                                  maxClip = 1,
                                  vMin    = -1,
                                  vMax    = 1,
                                  delta   = 0.01,
                                  epsilon = 0.01],
                    mesh = [[length=0.1,n=10],[length=0.4,n=40],[length=0.4,n=40],[length=0.1,n=10]],
                    states_guess = []) ;

